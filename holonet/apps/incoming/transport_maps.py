import logging
import os

from django.conf import settings
from django.utils import timezone
from invoke import run

from holonet.apps.lists.models import Domain, List

log = logging.getLogger(__name__)
HASH_LINE = '{0:{1}}lmtp:[{2}]:{3}'
FILE_HEADER = """\
# AUTOMATICALLY GENERATED BY HOLONET ON {0}
#
# This file is generated by Holonet, and is kept in sync with the binary hash
# file.  YOU SHOULD NOT MANUALLY EDIT THIS FILE unless you know what you're
# doing, and can keep the two files properly in sync.  If you screw it up,
# you're on your own.
"""


def generate_domain_file():
    """
    Generate the content of the domain map file.
    """
    domains = set(Domain.objects.all().distinct('domain').values_list('domain', flat=True))

    header = FILE_HEADER.format(timezone.now().replace(microsecond=0))
    content = '\n'.join(['{0} {0}'.format(domain) for domain in domains])
    return header + content


def generate_recipient_file():
    """
    Generate content of the recipient destination map file.
    """
    lists = List.objects.all().prefetch_related('domains')

    header = FILE_HEADER.format(timezone.now().replace(microsecond=0))
    recipients = []
    for mailing_list in lists:
        recipients += [HASH_LINE.format(
            posting_address,
            len(str(posting_address)) + 3,
            settings.TRANSPORT_MAP_LMTP_HOST,
            settings.TRANSPORT_MAP_LMTP_PORT
        ) for posting_address in mailing_list.posting_addresses()]

    content = '\n'.join(recipients)
    return header + content


def create_transport_maps():
    """
    Generate new transport maps and save to disk. Run the postmap command if it is set.
    """
    postmap_command = settings.POSTFIX_POSTMAP_COMMAND

    # Find the transport maps location
    transport_maps_location = settings.POSTFIX_TRANSPORT_MAPS_LOCATION or os.path.join(
        os.path.dirname(settings.BASE_DIR), 'transport_maps/'
    )

    # Create the transport maps directory if it not exists
    if not os.path.exists(transport_maps_location):
        os.mkdir(transport_maps_location)

    lmtp_filename = os.path.join(transport_maps_location, 'postfix_lmtp')
    domains_filename = os.path.join(transport_maps_location, 'postfix_domains')

    new_lmtp_filename = os.path.join(transport_maps_location, '{0}.new'.format(lmtp_filename))
    new_domains_filename = os.path.join(transport_maps_location, '{0}.new'.format(domains_filename))

    with open(new_lmtp_filename, 'w') as file:
        file.write(generate_recipient_file())
    os.rename(new_lmtp_filename, lmtp_filename)

    with open(new_domains_filename, 'w') as file:
        file.write(generate_domain_file())
    os.rename(new_domains_filename, domains_filename)

    # Run the postmap command to update incoming transport maps
    errors = []

    if not postmap_command:
        for path in (lmtp_filename, domains_filename):
            command_result = run('{0} {1}'.format(postmap_command, path))
            if command_result.failed:
                errors.append(path)
                log.error('Could not run postmap on {0}'.format(path))

    if not errors:
        log.info('Generated new lmtp and domains transport maps')
